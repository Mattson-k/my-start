import java.util.*;

// Employee class
class Employee {
    int id;
    String name;
    String email;
    List<String> skills;
    
    public Employee(int id, String name, String email, List<String> skills) {
        this.id = id;
        this.name = name;
        this.email = email;
        this.skills = skills;
    }
    
    // getters and setters
    public int getId() {
        return id;
    }
    
    public void setId(int id) {
        this.id = id;
    }
    
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public String getEmail() {
        return email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }
    
    public List<String> getSkills() {
        return skills;
    }
    
    public void setSkills(List<String> skills) {
        this.skills = skills;
    }
}

// Team class
import java.util.ArrayList;
class Team {
    String name;
    List<Employee> employees;
    
    public Team(String name) {
        this.name = name;
        employees = new ArrayList<>();
    }
    
    // getters and setters
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public List<Employee> getEmployees() {
        return employees;
    }
    
    public void setEmployees(List<Employee> employees) {
        this.employees = employees;
    }
    
    // add employee to team
    public void addEmployee(Employee employee) {
        employees.add(employee);
    }
}

// Task class
import java.time.LocalDate;
class Task {
    String name;
    Date startDate;
    Date endDate;
    Team team;
    
    public Task(String name, Date startDate, Date endDate, Team team) {
        this.name = name;
        this.startDate = startDate;
        this.endDate = endDate;
        this.team = team;
    }
    
    // getters and setters
    public String getName() {
        return name;
    }
    
    public void setName(String name) {
        this.name = name;
    }
    
    public Date getStartDate() {
        return startDate;
    }
    
    public void setStartDate(Date startDate) {
        this.startDate = startDate;
    }
    
    public Date getEndDate() {
        return endDate;
    }
    
    public void setEndDate(Date endDate) {
        this.endDate = endDate;
    }
    
    public Team getTeam() {
        return team;
    }
    
    public void setTeam(Team team) {
        this.team = team;
    }
}

public class Scheduler {
            private List<Employee> employees;
            private List<Team> teams;

            public Scheduler() {
                this.employees = new ArrayList<>();
                this.teams = new ArrayList<>();
            }

            public void addEmployee(Employee employee) {
                employees.add(employee);
            }

            public void addTeam(Team team) {
                teams.add(team);
            }

            public void scheduleTasks(LocalDate startDate, LocalDate endDate, List<Task> tasks) {
                LocalDate currentDate = startDate;
                int currentTaskIndex = 0;

                while (!currentDate.isAfter(endDate)) {
                    // Check if current date is a weekday
                    if (currentDate.getDayOfWeek() == DayOfWeek.SATURDAY || currentDate.getDayOfWeek() == DayOfWeek.SUNDAY) {
                        currentDate = currentDate.plusDays(1);
                        continue;
                    }

                    // Get the available teams for the current date
                    List<Team> availableTeams = new ArrayList<>();
                    for (Team team : teams) {
                        boolean isAvailable = true;
                        for (Employee employee : team.getEmployees()) {
                            if (!isEmployeeAvailable(employee, currentDate)) {
                                isAvailable = false;
                                break;
                            }
                        }
                        if (isAvailable) {
                            availableTeams.add(team);
                        }
                    }

                    // Assign the next task to an available team
                    if (currentTaskIndex < tasks.size() && availableTeams.size() > 0) {
                        Task task = tasks.get(currentTaskIndex);
                        Team team = availableTeams.get(0);
                        task.setStartDate(currentDate);
                        task.setEndDate(task.getEndDate());
                        task.setTeam(team);
                        currentTaskIndex++;
                    }

                    currentDate = currentDate.plusDays(1);
                }
            }


                public boolean isAvailable(Employee employee, Date startDate, Date endDate) {
                    // check if employee works on weekdays
                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(startDate);
                    while (calendar.getTime().before(endDate)) {
                        int dayOfWeek = calendar.get(Calendar.DAY_OF_WEEK);
                        if (dayOfWeek == Calendar.SATURDAY || dayOfWeek == Calendar.SUNDAY) {
                            return false; // employee not available on weekends
                        }
                        calendar.add(Calendar.DAY_OF_MONTH, 1);
                    }
                    return true;
                }

            }
        }

